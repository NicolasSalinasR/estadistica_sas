alfa = 0.05
t_students <- t.test(x = mejorb,
y = mejorc,
paired = TRUE,
alternative = "two.sided",
mu = valor_nulo,
conf.level = 1-alfa)
alfa = 0.05
valor_nulo <- 0
t_students <- t.test(x = mejorb,
y = mejorc,
paired = TRUE,
alternative = "two.sided",
mu = valor_nulo,
conf.level = 1-alfa)
t_students
prueba_wilcox <- wilcox.test(mejorb, mejorc, alternative = "two.sided", paired =TRUE, conf.level = 1-alfa)
prueba_wilcox <- wilcox.test(mejorb, mejorc, alternative = "two.sided", paired =TRUE, conf.level = 1-alfa)
prueba_wilcox
set.seed(16)
datos_pregunta_4 <- subset(datos, n.nodos >= 50)
muestra_pregunta_4 <- datos_pregunta_4[sample(nrow(datos_pregunta_4),22), ]
mejora_pregunta4 <- muestra_pregunta_4$mejor.a
mejorb_pregunta4 <-  muestra_pregunta_4$mejor.B
mejorc_pregunta4 <- muestra_pregunta_4$mejor.C
diferencia1 <- mejora_pregunta4 - mejorb_pregunta4
diferencia2 <- mejorb_pregunta4 - mejorc_pregunta4
diferencia3 <- mejora_pregunta4 - mejorc_pregunta4
norm1 <- shapiro.test(diferencia1)
set.seed(16)
datos_pregunta_4 <- subset(datos, n.nodos >= 50)
muestra_pregunta_4 <- datos_pregunta_4[sample(nrow(datos_pregunta_4),22), ]
mejora_pregunta4 <- muestra_pregunta_4$mejor.a
mejorb_pregunta4 <-  muestra_pregunta_4$mejor.B
mejorc_pregunta4 <- muestra_pregunta_4$mejor.C
diferencia1 <- mejora_pregunta4 - mejorb_pregunta4
diferencia2 <- mejorb_pregunta4 - mejorc_pregunta4
diferencia3 <- mejora_pregunta4 - mejorc_pregunta4
norm1 <- shapiro.test(diferencia1)
View(datos_pregunta_4)
set.seed(16)
datos_pregunta_4 <- subset(datos, n.nodos >= 50)
muestra_pregunta_4 <- datos_pregunta_4[sample(nrow(datos_pregunta_4),22), ]
mejora_pregunta4 <- muestra_pregunta_4$mejor.a
mejorb_pregunta4 <-  muestra_pregunta_4$mejor.B
mejorc_pregunta4 <- muestra_pregunta_4$mejor.C
set.seed(16)
datos_pregunta_4 <- subset(datos, n.nodos >= 50)
muestra_pregunta_4 <- datos_pregunta_4[sample(nrow(datos_pregunta_4),22), ]
mejora_pregunta4 <- muestra_pregunta_4$mejor.a
mejorb_pregunta4 <-  muestra_pregunta_4$mejor.B
mejorc_pregunta4 <- muestra_pregunta_4$mejor.C
mejora_pregunta4
#librerias
#leer archivo
datos <- read.csv("EP07 Datos.csv", stringsAsFactors = TRUE)
set.seed(16)
datos_pregunta_4 <- subset(datos, n.nodos >= 50)
muestra_pregunta_4 <- datos_pregunta_4[sample(nrow(datos_pregunta_4),22), ]
mejora_pregunta4 <- muestra_pregunta_4$mejor.a
mejorb_pregunta4 <-  muestra_pregunta_4$mejor.B
mejorc_pregunta4 <- muestra_pregunta_4$mejor.C
View(datos_pregunta_4)
set.seed(16)
datos_pregunta_4 <- subset(datos, n.nodos >= 50)
muestra_pregunta_4 <- datos_pregunta_4[sample(nrow(datos_pregunta_4),22), ]
mejora_pregunta4 <- muestra_pregunta_4$mejor.A
mejorb_pregunta4 <-  muestra_pregunta_4$mejor.B
mejorc_pregunta4 <- muestra_pregunta_4$mejor.C
diferencia1 <- mejora_pregunta4 - mejorb_pregunta4
diferencia2 <- mejorb_pregunta4 - mejorc_pregunta4
diferencia3 <- mejora_pregunta4 - mejorc_pregunta4
norm1 <- shapiro.test(diferencia1)
norm2 <- shapiro.test(diferencia2)
norm3 <- shapiro.test(diferencia3)
diferencia1 <- mejora_pregunta4 - mejorb_pregunta4
diferencia2 <- mejorb_pregunta4 - mejorc_pregunta4
diferencia3 <- mejora_pregunta4 - mejorc_pregunta4
norm1 <- shapiro.test(diferencia1)
norm2 <- shapiro.test(diferencia2)
norm3 <- shapiro.test(diferencia3)
norm1
norm2
norm3
dependiente <- c(mejora_pregunta4, mejorb_pregunta4, mejorc_pregunta4)
independiente <- c(rep("mejor.A", length(mejora_pregunta4)),
rep("mejor.B", length(mejorb_pregunta4)),
rep("mejor.C", length(mejorc_pregunta4)))
independiente <- factor(independiente)
sujeto <- rep(1:7, 3)
datos <- data.frame(sujeto, dependiente, independiente )
dependiente <- c(mejora_pregunta4, mejorb_pregunta4, mejorc_pregunta4)
independiente <- c(rep("mejor.A", length(mejora_pregunta4)),
rep("mejor.B", length(mejorb_pregunta4)),
rep("mejor.C", length(mejorc_pregunta4)))
independiente <- factor(independiente)
sujeto <- rep(1:7, 3)
datos <- data.frame(sujeto, dependiente, independiente)
dependiente <- c(mejora_pregunta4, mejorb_pregunta4, mejorc_pregunta4)
independiente <- c(rep("mejor.A", length(mejora_pregunta4)),
rep("mejor.B", length(mejorb_pregunta4)),
rep("mejor.C", length(mejorc_pregunta4)))
independiente <- factor(independiente)
sujeto <- rep(1:22, 3)
datos <- data.frame(sujeto, dependiente, independiente)
alfa <- 0.1
prueba_friedman <- friedman.test(dependiente ~ independiente | sujeto, data = datos)
print(prueba_friedman)
post-hoc <- pairwise.wilcox.test(datos$dependiente, datos$independiente, p.adjust.method = "holm", paired = TRUE)
post_hoc <- pairwise.wilcox.test(datos$dependiente, datos$independiente, p.adjust.method = "holm", paired = TRUE)
post_hoc
#Se usan las librerías necesarias para el ejercicio. Si no se encuentran instaladas en el equipo, se instalan automáticamente
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ggpubr)
library(ez)
library(tidyverse)
#Se lee el archivo .csv entregado
datos <- read.csv("EP07 Datos.csv")
#Usamos la seed 73
set.seed(73)
#Con los datos ya leídos, se filtran para tener nodo > 64
datos_filtrados = subset(datos, n.nodos > 64)
#Se define el nivel de significancia
alpha = 0.05
#Se filtra para cada versión del algoritmo
algoritmoB = sample(datos_filtrados$tiempo.B, 24)
algoritmoC = sample(datos_filtrados$tiempo.C, 20)
#Como las muestras son apareadas, se usa wilcoxon para rango de signos
prueba1 = wilcox.test(algoritmoB, algoritmoC, alternative = "two.sided", paired = FALSE, conf.level = 1-alpha)
print(prueba1)
#Se usa la seed 13
set.seed(13)
#En la anterior pregunta se filtró ya para nodos > 64. Ahora, se filtrarán 22 datos de la tabla
datos_filtrados_22Datos = datos_filtrados[sample(nrow(datos_filtrados), 22),]
#Se filtra para versión A y B
algoritmoA_mejor = datos_filtrados_22Datos$mejor.A
algoritmoB_mejor = datos_filtrados_22Datos$mejor.B
#Se aplica la prueba de Wilcox para muestras pareadas
prueba2 = wilcox.test(algoritmoA_mejor, algoritmoB_mejor, alternative = "two.sided", paired = TRUE, conf.level = 1-alpha)
print(prueba2)
set.seed(73)
datos_pregunta_4 <- subset(datos, n.nodos >= 50)
muestra_pregunta_4 <- datos_pregunta_4[sample(nrow(datos_pregunta_4),22), ]
mejora_pregunta4 <- muestra_pregunta_4$mejor.A
mejorb_pregunta4 <-  muestra_pregunta_4$mejor.B
mejorc_pregunta4 <- muestra_pregunta_4$mejor.C
diferencia1 <- mejora_pregunta4 - mejorb_pregunta4
diferencia2 <- mejorb_pregunta4 - mejorc_pregunta4
diferencia3 <- mejora_pregunta4 - mejorc_pregunta4
norm1 <- shapiro.test(diferencia1)
norm2 <- shapiro.test(diferencia2)
norm3 <- shapiro.test(diferencia3)
norm1
norm2
norm3
dependiente <- c(mejora_pregunta4, mejorb_pregunta4, mejorc_pregunta4)
independiente <- c(rep("mejor.A", length(mejora_pregunta4)),
rep("mejor.B", length(mejorb_pregunta4)),
rep("mejor.C", length(mejorc_pregunta4)))
independiente <- factor(independiente)
sujeto <- rep(1:22, 3)
datos <- data.frame(sujeto, dependiente, independiente)
alfa <- 0.1
prueba_friedman <- friedman.test(dependiente ~ independiente | sujeto, data = datos)
print(prueba_friedman)
post_hoc <- pairwise.wilcox.test(datos$dependiente, datos$independiente, p.adjust.method = "holm", paired = TRUE)
post_hoc
post_hoc <- pairwise.wilcox.test(datos$dependiente, datos$independiente, p.adjust.method = "holm", paired = TRUE)
post_hoc
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
#Se filtran los datos para obtener instancias de 50 o mas nodos
datos <- subset(datos, n.nodos >= 50)
#Se usan las librerías necesarias para el ejercicio. Si no se encuentran instaladas en el equipo, se instalan automáticamente
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ggpubr)
library(ez)
library(tidyverse)
#Se lee el archivo .csv entregado
datos <- read.csv("EP07 Datos.csv")
#Se filtran los datos para obtener instancias de 50 o mas nodos
datos <- subset(datos, n.nodos >= 50)
# Seleccionar las columnas relevantes (mejores rendimientos)
mejores_rendimientos <- datos_filtrados[, c("mejor.A", "mejor.B", "mejor.C")]
# Fijar la semilla para reproducibilidad
set.seed(73)
# Obtener una muestra aleatoria de 22 instancias
muestra <- mejores_rendimientos[sample(nrow(mejores_rendimientos), 22), ]
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
# Verificar las condiciones de la prueba de Wilcoxon
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
# Realizar una prueba de Wilcoxon emparejada para comparar los rendimientos de los algoritmos
# Utilizamos pairwise.wilcox.test para comparar cada par de algoritmos
resultado_prueba <- pairwise.wilcox.test(muestra_larga$Rendimiento, muestra_larga$Algoritmo, p.adjust.method = "holm", paired = TRUE)
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
# Verificar las condiciones de la prueba de Wilcoxon
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
# Realizar una prueba de Wilcoxon emparejada para comparar los rendimientos de los algoritmos
# Utilizamos pairwise.wilcox.test para comparar cada par de algoritmos
resultado_prueba <- pairwise.wilcox.test(muestra_larga$Rendimiento, muestra_larga$Algoritmo, p.adjust.method = "holm", paired = TRUE)
resultado_prueba
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
# Realizar una prueba de Friedman para comparar los rendimientos de los algoritmos
resultado_prueba <- friedman.test(Rendimiento ~ Algoritmo, data = muestra_larga)
#Se filtran los datos para obtener instancias de 50 o mas nodos
datos <- subset(datos, n.nodos >= 50)
# Seleccionar las columnas relevantes (mejores rendimientos)
mejores_rendimientos <- datos_filtrados[, c("mejor.A", "mejor.B", "mejor.C")]
# Fijar la semilla para reproducibilidad
set.seed(73)
# Obtener una muestra aleatoria de 22 instancias
muestra <- mejores_rendimientos[sample(nrow(mejores_rendimientos), 22), ]
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
# Realizar una prueba de Friedman para comparar los rendimientos de los algoritmos
resultado_prueba <- friedman.test(Rendimiento ~ Algoritmo, data = muestra_larga)
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
# Realizar una prueba de Friedman para comparar los rendimientos de los algoritmos
resultado_prueba <- friedman.test(Rendimiento ~ Algoritmo, data = muestra_larga)
#Se usan las librerías necesarias para el ejercicio. Si no se encuentran instaladas en el equipo, se instalan automáticamente
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ggpubr)
library(ez)
library(tidyverse)
#Se lee el archivo .csv entregado
datos <- read.csv("EP07 Datos.csv")
#Se filtran los datos para obtener instancias de 50 o mas nodos
datos <- subset(datos, n.nodos >= 50)
# Seleccionar las columnas relevantes (mejores rendimientos)
mejores_rendimientos <- datos_filtrados[, c("mejor.A", "mejor.B", "mejor.C")]
# Fijar la semilla para reproducibilidad
set.seed(73)
# Obtener una muestra aleatoria de 22 instancias
muestra <- mejores_rendimientos[sample(nrow(mejores_rendimientos), 22), ]
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
# Realizar una prueba de Friedman para comparar los rendimientos de los algoritmos
resultado_prueba <- friedman.test(Rendimiento ~ Algoritmo, data = muestra_larga)
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
# Realizar una prueba de Friedman para comparar los rendimientos de los algoritmos
resultado_prueba <- friedman.test(as.matrix(muestra_larga[, "Rendimiento"]), group = muestra_larga$Algoritmo)
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
# Realizar una prueba de Friedman para comparar los rendimientos de los algoritmos
resultado_prueba <- friedman.test(as.matrix(muestra_larga[, "Rendimiento"]), group = muestra_larga$Algoritmo)
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
# Realizar una prueba de Friedman para comparar los rendimientos de los algoritmos
resultado_prueba <- friedman.test(Rendimiento ~ Algoritmo, data = muestra_larga)
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
# Realizar una prueba de Friedman para comparar los rendimientos de los algoritmos
resultado_prueba <- friedman.test(muestra ~ Algoritmo, data = muestra_larga)
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
sujeto <- rep(1:22, 3)
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
# Realizar una prueba de Friedman para comparar los rendimientos de los algoritmos
resultado_prueba <- friedman.test(muestra ~ Algoritmo | sujeto, data = muestra_larga)
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
sujeto <- rep(1:22, 3)
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
datos <- data.frame(sujeto, muestra, Algoritmo)
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
sujeto <- rep(1:22, 3)
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
datos <- data.frame(sujeto, muestra, muestra_larga)
# Realizar una prueba de Friedman para comparar los rendimientos de los algoritmos
resultado_prueba <- friedman.test(muestra ~ Algoritmo | sujeto, data = muestra_larga)
# Llevar los datos a formato largo
library(tidyr)
muestra_larga <- pivot_longer(muestra, cols = starts_with("mejor"), names_to = "Algoritmo", values_to = "Rendimiento")
sujeto <- rep(1:22, 3)
# Verificar las condiciones para usar la prueba de Friedman
# 1. Independencia: Se asume que las muestras son independientes, lo cual es razonable en este caso.
# 2. Distribución: No se asume una distribución normal en los datos.
datos <- data.frame(sujeto, mejores_rendimientos, muestra_larga)
#Se filtran los datos para obtener instancias de 50 o mas nodos
datos <- subset(datos, n.nodos >= 50)
#Se usan las librerías necesarias para el ejercicio. Si no se encuentran instaladas en el equipo, se instalan automáticamente
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ggpubr)
library(ez)
library(tidyverse)
#Se lee el archivo .csv entregado
datos <- read.csv("EP07 Datos.csv")
#Se filtran los datos para obtener instancias de 50 o mas nodos
datos <- subset(datos, n.nodos >= 50)
#En la anterior pregunta se filtró ya para nodos > 64. Ahora, se filtrarán 22 datos de la tabla
datos_filtrados_22Datos = datos_filtrados[sample(nrow(datos_filtrados), 22),]
#Se filtra para versión A y B
algoritmoA_mejor = datos_filtrados_22Datos$mejor.A
algoritmoB_mejor = datos_filtrados_22Datos$mejor.B
algoritmoC_mejor = datos_filtrados_22Datos$mejor.C
dependiente <- c(algoritmoA_mejor, algoritmoB_mejor, algoritmoC_mejor)
independiente <- c(rep("mejor.A", length(algoritmoA_mejor)),
rep("mejor.B", length(algoritmoB_mejor)),
rep("mejor.C", length(algoritmoC_mejor)))
independiente <- factor(independiente)
sujeto <- rep(1:22, 3)
datos <- data.frame(sujeto, dependiente, independiente)
alfa <- 0.1
prueba_friedman <- friedman.test(dependiente ~ independiente | sujeto, data = datos)
print(prueba_friedman)
dependiente <- c(algoritmoA_mejor, algoritmoB_mejor, algoritmoC_mejor)
independiente <- c(rep("mejor.A", length(algoritmoA_mejor)),
rep("mejor.B", length(algoritmoB_mejor)),
rep("mejor.C", length(algoritmoC_mejor)))
independiente <- factor(independiente)
sujeto <- rep(1:22, 3)
datos <- data.frame(sujeto, dependiente, independiente)
alfa <- 0.1
prueba_friedman <- friedman.test(dependiente ~ independiente | sujeto, data = datos)
print(prueba_friedman)
post_hoc <- pairwise.wilcox.test(datos$dependiente, datos$independiente, p.adjust.method = "holm", paired = TRUE)
post_hoc
#Se filtran los datos para obtener instancias de 50 o mas nodos
datos <- subset(datos, n.nodos >= 50)
#Se usan las librerías necesarias para el ejercicio. Si no se encuentran instaladas en el equipo, se instalan automáticamente
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ggpubr)
library(ez)
library(tidyverse)
#Se lee el archivo .csv entregado
datos <- read.csv("EP07 Datos.csv")
#Se filtran los datos para obtener instancias de 50 o mas nodos
datos <- subset(datos, n.nodos >= 50)
#En la anterior pregunta se filtró ya para nodos > 64. Ahora, se filtrarán 22 datos de la tabla
datos_filtrados_22Datos = datos_filtrados[sample(nrow(datos_filtrados), 22),]
#Se filtra para versión A y B
algoritmoA_mejor = datos_filtrados_22Datos$mejor.A
algoritmoB_mejor = datos_filtrados_22Datos$mejor.B
algoritmoC_mejor = datos_filtrados_22Datos$mejor.C
variables <- c(algoritmoA_mejor, algoritmoB_mejor, algoritmoC_mejor)
variable_independiente <- c(rep("mejor.A", length(algoritmoA_mejor)),
rep("mejor.B", length(algoritmoB_mejor)),
rep("mejor.C", length(algoritmoC_mejor)))
variable_independiente <- factor(variable_independiente)
sujeto <- rep(1:22, 3)
datos <- data.frame(sujeto, variables, variable_independiente)
alfa <- 0.1
prueba_friedman <- friedman.test(variables ~ variable_independiente | sujeto, data = datos)
print(prueba_friedman)
variables <- c(algoritmoA_mejor, algoritmoB_mejor, algoritmoC_mejor)
variable_independiente <- c(rep("mejor.A", length(algoritmoA_mejor)),
rep("mejor.B", length(algoritmoB_mejor)),
rep("mejor.C", length(algoritmoC_mejor)))
variable_independiente <- factor(variable_independiente)
sujeto <- rep(1:22, 3)
datos <- data.frame(sujeto, variables, variable_independiente)
alfa <- 0.1
prueba_friedman <- friedman.test(variables ~ variable_independiente, data = datos)
variables <- c(algoritmoA_mejor, algoritmoB_mejor, algoritmoC_mejor)
variable_independiente <- c(rep("mejor.A", length(algoritmoA_mejor)),
rep("mejor.B", length(algoritmoB_mejor)),
rep("mejor.C", length(algoritmoC_mejor)))
variable_independiente <- factor(variable_independiente)
sujeto <- rep(1:22, 3)
datos <- data.frame( variables, variable_independiente)
alfa <- 0.1
prueba_friedman <- friedman.test(variables ~ variable_independiente, data = datos)
help("friedman")
help("friedman.test")
#friedman.test(x ~ w | t, data = wb)
variables <- c(algoritmoA_mejor, algoritmoB_mejor, algoritmoC_mejor)
variable_independiente <- c(rep("mejor.A", length(algoritmoA_mejor)),
rep("mejor.B", length(algoritmoB_mejor)),
rep("mejor.C", length(algoritmoC_mejor)))
variable_independiente <- factor(variable_independiente)
#Es un vector que asigna un identificador único a cada sujeto o instancia. En este caso, los sujetos son las instancias de datos.
instancia <- rep(1:22)
datos <- data.frame(instancia, variables, variable_independiente)
alfa <- 0.1
prueba_friedman <- friedman.test(variables ~ variable_independiente | instancia, data = datos)
print(prueba_friedman)
# Filtrar los datos para instancias con 50 o más nodos
datos_filtrados <- datos[datos$n.nodos >= 50, ]
# Seleccionar las columnas relevantes con los tiempos de ejecución (en formato ancho)
tiempos_ejecucion <- datos_filtrados[, c("tiempo.A", "tiempo.B", "tiempo.C")]
#Se usan las librerías necesarias para el ejercicio. Si no se encuentran instaladas en el equipo, se instalan automáticamente
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ggpubr)
library(ez)
library(tidyverse)
#Se lee el archivo .csv entregado
datos <- read.csv("EP07 Datos.csv")
# Filtrar los datos para instancias con 50 o más nodos
datos_filtrados <- datos[datos$n.nodos >= 50, ]
# Seleccionar las columnas relevantes con los tiempos de ejecución (en formato ancho)
tiempos_ejecucion <- datos_filtrados[, c("tiempo.A", "tiempo.B", "tiempo.C")]
# Fijar la semilla para reproducibilidad
set.seed(31)
# Obtener muestras aleatorias independientes de tiempos registrados
muestra_A <- sample(tiempos_ejecucion$tiempo.A, 15)
muestra_B <- sample(tiempos_ejecucion$tiempo.B, 14)
muestra_C <- sample(tiempos_ejecucion$tiempo.C, 13)
# Realizar la prueba de Kruskal-Wallis para comparar los tiempos de ejecución entre las versiones del algoritmo
resultado_prueba <- kruskal.test(list(muestra_A, muestra_B, muestra_C))
# Imprimir el resultado de la prueba
print(resultado_prueba)
# Comprobar la independencia de las muestras
# No hay un método directo para verificar la independencia en el código, pero puedes asegurarte de que las muestras se seleccionen aleatoriamente y de que no haya dependencia conocida entre ellas.
# Comprobar la homogeneidad de las varianzas
varianzas <- apply(tiempos_ejecucion, 2, var)  # Calcular las varianzas de cada muestra
print(varianzas)  # Imprimir las varianzas
# Si las varianzas son aproximadamente iguales, entonces la homogeneidad de las varianzas se cumple.
# Visualizar las distribuciones de las muestras
par(mfrow=c(1, 3))  # Dividir la ventana gráfica en 1 fila y 3 columnas
hist(tiempos_ejecucion$tiempo.A, main="Algoritmo A", xlab="Tiempo de ejecución")  # Histograma de los tiempos de ejecución para el algoritmo A
hist(tiempos_ejecucion$tiempo.B, main="Algoritmo B", xlab="Tiempo de ejecución")  # Histograma de los tiempos de ejecución para el algoritmo B
hist(tiempos_ejecucion$tiempo.C, main="Algoritmo C", xlab="Tiempo de ejecución")  # Histograma de los tiempos de ejecución para el algoritmo C
