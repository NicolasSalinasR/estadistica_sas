# Función para simular diferencias de horas bajo la hipótesis nula
simular_diferencia_horas <- function(muestra_hombres, muestra_mujeres) {
# Calcular la diferencia de horas observada en las muestras
diferencia_observada <- mean(muestra_hombres$o10) - mean(muestra_mujeres$o10)
# Realizar una simulación de Monte Carlo
num_simulaciones <- 10000
diferencias_simuladas <- replicate(num_simulaciones, {
# Mezclar aleatoriamente las horas de hombres y mujeres
horas_mezcladas <- c(muestra_hombres$o10, muestra_mujeres$o10)
horas_mezcladas <- sample(horas_mezcladas)
# Calcular la diferencia de horas simulada
diferencia_simulada <- mean(horas_mezcladas[1:125]) - mean(horas_mezcladas[126:250])
return(diferencia_simulada)
})
# Calcular el p-valor
p_valor <- mean(abs(diferencias_simuladas) >= abs(diferencia_observada))
return(p_valor)
}
# Aplicar la función para simular las diferencias de horas
p_valor <- simular_diferencia_horas(muestra_hombres, muestra_mujeres)
# Mostrar el p-valor
print(p_valor)
# Función para simular diferencias de horas bajo la hipótesis nula
simular_diferencia_horas <- function(muestra_hombres, muestra_mujeres) {
# Calcular la diferencia de horas observada en las muestras
diferencia_observada <- mean(muestra_hombres$o10) - mean(muestra_mujeres$o10)
# Realizar una simulación de Monte Carlo
num_simulaciones <- 19999
diferencias_simuladas <- replicate(num_simulaciones, {
# Mezclar aleatoriamente las horas de hombres y mujeres
horas_mezcladas <- c(muestra_hombres$o10, muestra_mujeres$o10)
horas_mezcladas <- sample(horas_mezcladas)
# Calcular la diferencia de horas simulada
diferencia_simulada <- mean(horas_mezcladas[1:125]) - mean(horas_mezcladas[126:250])
return(diferencia_simulada)
})
# Calcular el p-valor
p_valor <- mean(abs(diferencias_simuladas) >= abs(diferencia_observada))
return(p_valor)
}
# Aplicar la función para simular las diferencias de horas
p_valor <- simular_diferencia_horas(muestra_hombres, muestra_mujeres)
# Mostrar el p-valor
print(p_valor)
# Función para simular diferencias de horas bajo la hipótesis nula
simular_diferencia_horas <- function(muestra_hombres, muestra_mujeres) {
# Calcular la diferencia de horas observada en las muestras
diferencia_observada <- mean(muestra_hombres$o10) - mean(muestra_mujeres$o10)
# Realizar una simulación de Monte Carlo
num_simulaciones <- 199999
diferencias_simuladas <- replicate(num_simulaciones, {
# Mezclar aleatoriamente las horas de hombres y mujeres
horas_mezcladas <- c(muestra_hombres$o10, muestra_mujeres$o10)
horas_mezcladas <- sample(horas_mezcladas)
# Calcular la diferencia de horas simulada
diferencia_simulada <- mean(horas_mezcladas[1:125]) - mean(horas_mezcladas[126:250])
return(diferencia_simulada)
})
# Calcular el p-valor
p_valor <- mean(abs(diferencias_simuladas) >= abs(diferencia_observada))
return(p_valor)
}
# Aplicar la función para simular las diferencias de horas
p_valor <- simular_diferencia_horas(muestra_hombres, muestra_mujeres)
# Mostrar el p-valor
print(p_valor)
# Función para simular diferencias de horas bajo la hipótesis nula
simular_diferencia_horas <- function(muestra_hombres, muestra_mujeres) {
# Calcular la diferencia de horas observada en las muestras
diferencia_observada <- mean(muestra_hombres$o10) - mean(muestra_mujeres$o10)
# Realizar una simulación de Monte Carlo
num_simulaciones <- 19999
diferencias_simuladas <- replicate(num_simulaciones, {
# Mezclar aleatoriamente las horas de hombres y mujeres
horas_mezcladas <- c(muestra_hombres$o10, muestra_mujeres$o10)
horas_mezcladas <- sample(horas_mezcladas)
# Calcular la diferencia de horas simulada
diferencia_simulada <- mean(horas_mezcladas[1:125]) - mean(horas_mezcladas[126:250])
return(diferencia_simulada)
})
# Calcular el p-valor
p_valor <- mean(abs(diferencias_simuladas) >= abs(diferencia_observada))
return(p_valor)
}
# Aplicar la función para simular las diferencias de horas
p_valor <- simular_diferencia_horas(muestra_hombres, muestra_mujeres)
# Mostrar el p-valor
print(p_valor)
# Función mejorada para simular diferencias de horas bajo la hipótesis nula
simular_diferencia_horas_mejorada <- function(muestra_hombres, muestra_mujeres) {
# Calcular la diferencia de horas observada en las muestras
diferencia_observada <- mean(muestra_hombres$o10) - mean(muestra_mujeres$o10)
# Realizar simulaciones de Monte Carlo más robustas
num_simulaciones <- 10000
diferencias_simuladas <- numeric(num_simulaciones)
for (i in 1:num_simulaciones) {
# Mezclar aleatoriamente las horas de hombres y mujeres
horas_mezcladas <- c(muestra_hombres$o10, muestra_mujeres$o10)
horas_mezcladas <- sample(horas_mezcladas)
# Calcular la diferencia de horas simulada
diferencia_simulada <- mean(horas_mezcladas[1:125]) - mean(horas_mezcladas[126:250])
diferencias_simuladas[i] <- diferencia_simulada
}
# Calcular el p-valor
p_valor <- mean(abs(diferencias_simuladas) >= abs(diferencia_observada), na.rm = TRUE)
return(p_valor)
}
# Aplicar la función mejorada para simular las diferencias de horas
p_valor_mejorado <- simular_diferencia_horas_mejorada(muestra_hombres, muestra_mujeres)
# Mostrar el p-valor mejorado
print(p_valor_mejorado)
#filjar una semilla para obtener la muestra aleatoria
set.seed(1412)
datos_pregunta1 <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
datos_pregunta1 z- na.omit(datos_pregunta1)
#filjar una semilla para obtener la muestra aleatoria
set.seed(1412)
datos_pregunta1 <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
datos_pregunta1 <- na.omit(datos_pregunta1)
hombres_santiago <- datos_pregunta1 %>%
filter(sexo == "Hombre") %>%
select(sexo, o10)
mujeres_santiago <- datos_pregunta1 %>%
filter(sexo == "Mujer") %>%
select(sexo, o10)
muestra_hombres <- hombres_santiago %>%
sample_n(125, replace = FALSE)
View(datos_pregunta1)
#filjar una semilla para obtener la muestra aleatoria
set.seed(1412)
datos_pregunta1 <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
hombres_santiago <- datos_pregunta1 %>%
filter(sexo == "Hombre") %>%
select(sexo, o10)
mujeres_santiago <- datos_pregunta1 %>%
filter(sexo == "Mujer") %>%
select(sexo, o10)
muestra_hombres <- hombres_santiago %>%
sample_n(125, replace = FALSE)
muestra_mujeres <- mujeres_santiago %>%
sample_n(125, replace = FALSE)
#filjar una semilla para obtener la muestra aleatoria
set.seed(1412)
datos_pregunta1 <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con NA en la columna 'o10' de hombres_santiago
hombres_santiago <- datos_pregunta1 %>%
filter(sexo == "Hombre" & !is.na(o10)) %>%
select(sexo, o10)
# Eliminar filas con NA en la columna 'o10' de mujeres_santiago
mujeres_santiago <- datos_pregunta1 %>%
filter(sexo == "Mujer" & !is.na(o10)) %>%
select(sexo, o10)
# Obtener muestra de hombres sin NA en 'o10'
muestra_hombres <- hombres_santiago %>%
sample_n(125, replace = FALSE)
# Obtener muestra de mujeres sin NA en 'o10'
muestra_mujeres <- mujeres_santiago %>%
sample_n(125, replace = FALSE)
# Función mejorada para simular diferencias de horas bajo la hipótesis nula
simular_diferencia_horas_mejorada <- function(muestra_hombres, muestra_mujeres) {
# Calcular la diferencia de horas observada en las muestras
diferencia_observada <- mean(muestra_hombres$o10) - mean(muestra_mujeres$o10)
# Realizar simulaciones de Monte Carlo más robustas
num_simulaciones <- 10000
diferencias_simuladas <- numeric(num_simulaciones)
for (i in 1:num_simulaciones) {
# Mezclar aleatoriamente las horas de hombres y mujeres
horas_mezcladas <- c(muestra_hombres$o10, muestra_mujeres$o10)
horas_mezcladas <- sample(horas_mezcladas)
# Calcular la diferencia de horas simulada
diferencia_simulada <- mean(horas_mezcladas[1:125]) - mean(horas_mezcladas[126:250])
diferencias_simuladas[i] <- diferencia_simulada
}
# Calcular el p-valor
p_valor <- mean(abs(diferencias_simuladas) >= abs(diferencia_observada), na.rm = TRUE)
return(p_valor)
}
# Aplicar la función mejorada para simular las diferencias de horas
p_valor_mejorado <- simular_diferencia_horas_mejorada(muestra_hombres, muestra_mujeres)
# Mostrar el p-valor mejorado
print(p_valor_mejorado)
library(dplyr)
install.packages("dplyr")
library(dplyr)
# abrir el archivo con los datos
datos <- read.csv2("EP08 Datos CASEN 2017.csv")
#filjar una semilla para obtener la muestra aleatoria
set.seed(1412)
datos_pregunta1 <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con NA en la columna 'o10' de hombres_santiago
hombres_santiago <- datos_pregunta1 %>%
filter(sexo == "Hombre" & !is.na(o10)) %>%
select(sexo, o10)
# Eliminar filas con NA en la columna 'o10' de mujeres_santiago
mujeres_santiago <- datos_pregunta1 %>%
filter(sexo == "Mujer" & !is.na(o10)) %>%
select(sexo, o10)
# Obtener muestra de hombres sin NA en 'o10'
muestra_hombres <- hombres_santiago %>%
sample_n(125, replace = FALSE)
# Obtener muestra de mujeres sin NA en 'o10'
muestra_mujeres <- mujeres_santiago %>%
sample_n(125, replace = FALSE)
# Función mejorada para simular diferencias de horas bajo la hipótesis nula
simular_diferencia_horas_mejorada <- function(muestra_hombres, muestra_mujeres) {
# Calcular la diferencia de horas observada en las muestras
diferencia_observada <- mean(muestra_hombres$o10) - mean(muestra_mujeres$o10)
# Realizar simulaciones de Monte Carlo más robustas
num_simulaciones <- 10000
diferencias_simuladas <- numeric(num_simulaciones)
for (i in 1:num_simulaciones) {
# Mezclar aleatoriamente las horas de hombres y mujeres
horas_mezcladas <- c(muestra_hombres$o10, muestra_mujeres$o10)
horas_mezcladas <- sample(horas_mezcladas)
# Calcular la diferencia de horas simulada
diferencia_simulada <- mean(horas_mezcladas[1:125]) - mean(horas_mezcladas[126:250])
diferencias_simuladas[i] <- diferencia_simulada
}
# Calcular el p-valor
p_valor <- mean(abs(diferencias_simuladas) >= abs(diferencia_observada), na.rm = TRUE)
return(p_valor)
}
# Aplicar la función mejorada para simular las diferencias de horas
p_valor_mejorado <- simular_diferencia_horas_mejorada(muestra_hombres, muestra_mujeres)
# Mostrar el p-valor mejorado
print(p_valor_mejorado)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
difucultad <- subset(datos_pregunta, h10b %in% c("S�", "algo de dificultad", "mucha dificultad"))
View(difucultad)
View(datos_pregunta)
View(difucultad)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
difucultad <- subset(datos_pregunta, h10b %in% c("S�", "algo de dificultad", "mucha dificultad"))
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
difucultad <- datos_pregunta[grep("Sí|algo de dificultad|mucha dificultad", datos$h10b), ]
View(difucultad)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
difucultad <- datos_pregunta[grep("Sí", datos$h10b), ]
View(difucultad)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
difucultad <- datos_pregunta[datos_pregunta$h10b == "Sí", ]
View(difucultad)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
difucultad <- datos_pregunta[datos_pregunta$h10b == "Sí", ]
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
difucultad <- datos_pregunta %>%
filter(h10b == "Sí")
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
difucultad <- datos_pregunta %>%
filter(h10b == "Sí")
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
difucultad <- datos_pregunta %>%
filter(h10b == "S�")
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
difucultad <- datos_pregunta %>%
filter(h10b == "S�")
View(datos_pregunta)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
difucultad <- datos_pregunta %>%
filter(h10b %in% c("S�, algo de dificultad", "S�, mucha dificultad"))
View(difucultad)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
datos_hb10b <- datos_pregunta %>%
filter(h10b %in% c("S�, algo de dificultad", "S�, mucha dificultad"))
datos_hb10d <- datos_pregunta %>%
filter(h10b %in% c("S�, algo de dificultad", "S�, mucha dificultad"))
View(datos_hb10d)
View(datos_hb10b)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Eliminar filas con "Sin dificultad" en la columna "H10b" y "H10d"
datos_hb10b <- datos_pregunta %>%
filter(h10b %in% c("S�, algo de dificultad", "S�, mucha dificultad"))
datos_hb10d <- datos_pregunta %>%
filter(h10d %in% c("S�, algo de dificultad", "S�, mucha dificultad"))
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Obtener filas con "S�, algo de dificultad" y S�, mucha dificultad en la columna "h10b" (Uso de audifono o sordera)
datos_hb10b <- datos_pregunta %>%
filter(h10b %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener filas con "S�, algo de dificultad" y S�, mucha dificultad en la columna "h10d" (Dificultad para recordar o para concentrarse)
datos_hb10d <- datos_pregunta %>%
filter(h10d %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener muestra de "h10b"
muestra_h10b <- hombres_santiago %>%
sample_n(275, replace = TRUE)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Obtener filas con "S�, algo de dificultad", y "S�, mucha dificultad" en la columna "h10b" y la gente con edad menor a 65 (Uso de audifono o sordera)
datos_hb10b <- datos_pregunta %>%
filter(h10b %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener filas con "S�, algo de dificultad" y S�, mucha dificultad en la columna "h10d" y la gente con edad menor a 65 (Dificultad para recordar o para concentrarse)
datos_hb10d <- datos_pregunta %>%
filter(h10d %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener muestra de "h10b"
muestra_h10b <- datos_hb10b %>%
sample_n(275, replace = TRUE)
# Obtener muestra de "h10d"
muestra_h10d <- datos_hb10d %>%
sample_n(275, replace = TRUE)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Obtener filas con "S�, algo de dificultad", y "S�, mucha dificultad" en la columna "h10b" y la gente con edad menor a 65 (Uso de audifono o sordera)
datos_hb10b <- datos_pregunta %>%
filter(h10b %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener filas con "S�, algo de dificultad" y S�, mucha dificultad en la columna "h10d" y la gente con edad menor a 65 (Dificultad para recordar o para concentrarse)
datos_hb10d <- datos_pregunta %>%
filter(h10d %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener muestra de "h10b"
muestra_h10b <- datos_hb10b %>%
sample_n(275, replace = TRUE)
# Obtener muestra de "h10d"
muestra_h10d <- datos_hb10d %>%
sample_n(275, replace = TRUE)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Obtener filas con "S�, algo de dificultad", y "S�, mucha dificultad" en la columna "h10b" y la gente con edad menor a 65 (Uso de audifono o sordera)
datos_h10b <- datos_pregunta %>%
filter(h10b %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener filas con "S�, algo de dificultad" y S�, mucha dificultad en la columna "h10d" y la gente con edad menor a 65 (Dificultad para recordar o para concentrarse)
datos_h10d <- datos_pregunta %>%
filter(h10d %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener muestra de "h10b"
muestra_h10b <- datos_h10b %>%
sample_n(275, replace = TRUE)
# Obtener muestra de "h10d"
muestra_h10d <- datos_h10d %>%
sample_n(275, replace = TRUE)
# Calculo de la media de h10b
media_h10b <- mean(muestra_h10b)
# Calculo de la media de h10d
media_h10d <- mean(muestra_h10d)
View(muestra_h10b)
# Calculo de la media de h10b
media_h10b <- mean(muestra_h10b$edad)
# Calculo de la media de h10d
media_h10d <- mean(muestra_h10d$edad)
install.packages(c("simpleboot", "boot"))
library(simpleboot)
library(boot)
# Calculo de la media de h10b
media_h10b <- mean(muestra_h10b$edad)
# Calculo de la media de h10d
media_h10d <- mean(muestra_h10d$edad)
# Calculo del valor observado
valor_observado <- media_h10b - media_h10d
# Crear distribución de bootstrap.
B <- 2999
valor_nulo = 0
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Obtener filas con "S�, algo de dificultad", y "S�, mucha dificultad" en la columna "h10b" y la gente con edad menor a 65 (Uso de audifono o sordera)
datos_h10b <- datos_pregunta %>%
filter(h10b %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener filas con "S�, algo de dificultad" y S�, mucha dificultad en la columna "h10d" y la gente con edad menor a 65 (Dificultad para recordar o para concentrarse)
datos_h10d <- datos_pregunta %>%
filter(h10d %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener muestra de "h10b"
muestra_h10b <- sample_n(datos_h10b$edad,275, replace = FALSE)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Obtener filas con "S�, algo de dificultad", y "S�, mucha dificultad" en la columna "h10b" y la gente con edad menor a 65 (Uso de audifono o sordera)
datos_h10b <- datos_pregunta %>%
filter(h10b %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener filas con "S�, algo de dificultad" y S�, mucha dificultad en la columna "h10d" y la gente con edad menor a 65 (Dificultad para recordar o para concentrarse)
datos_h10d <- datos_pregunta %>%
filter(h10d %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener muestra de "h10b"
muestra_h10b <- sample(datos_h10b$edad,275, replace = FALSE)
set.seed(423)
datos_pregunta <- datos %>%
filter(region == "Regi�n Metropolitana de Santiago")
# Obtener filas con "S�, algo de dificultad", y "S�, mucha dificultad" en la columna "h10b" y la gente con edad menor a 65 (Uso de audifono o sordera)
datos_h10b <- datos_pregunta %>%
filter(h10b %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener filas con "S�, algo de dificultad" y S�, mucha dificultad en la columna "h10d" y la gente con edad menor a 65 (Dificultad para recordar o para concentrarse)
datos_h10d <- datos_pregunta %>%
filter(h10d %in% c("S�, algo de dificultad", "S�, mucha dificultad")) %>% filter(edad < 65)
# Obtener muestra de "h10b"
muestra_h10b <- sample(datos_h10b$edad,275, replace = TRUE)
# Obtener muestra de "h10d"
muestra_h10d <- sample(datos_h10d$edad, 275, replace = TRUE)
library(simpleboot)
library(boot)
# Calculo de la media de h10b
media_h10b <- mean(muestra_h10b)
# Calculo de la media de h10d
media_h10d <- mean(muestra_h10d)
# Calculo del valor observado
valor_observado <- media_h10b - media_h10d
# Crear distribución de bootstrap.
B <- 2999
valor_nulo = 0
distribucion_bootstrap <- two.boot(muestra_h10b, muestra_h10d)
library(simpleboot)
library(boot)
# Calculo de la media de h10b
media_h10b <- mean(muestra_h10b)
# Calculo de la media de h10d
media_h10d <- mean(muestra_h10d)
# Calculo del valor observado
valor_observado <- media_h10b - media_h10d
# Crear distribución de bootstrap.
B <- 2999
valor_nulo = 0
distribucion_bootstrap <- two.boot(muestra_h10b, muestra_h10d, FUN = mean, R = B)
View(distribucion_bootstrap)
library(simpleboot)
library(boot)
# Calculo de la media de h10b.
media_h10b <- mean(muestra_h10b)
# Calculo de la media de h10d.
media_h10d <- mean(muestra_h10d)
# Calculo del valor observado.
valor_observado <- media_h10b - media_h10d
# Crear distribución de bootstrap.
B <- 2999
valor_nulo = 0
distribucion_bootstrap <- two.boot(muestra_h10b, muestra_h10d, FUN = mean, R = B)
desplazamiento <- mean(distribucion_bootstrap[["t"]]) - valor_nulo
distribucion_nula <- distribucion_bootstrap[["t"]] - desplazamiento
# Determinar el valor p.
p <- (sum(abs(distribucion_nula) > abs(valor_observado)) + 1) / (B + 1)
cat("Valor p:", p)
library(simpleboot)
library(boot)
# Calculo de la media de h10b.
media_h10b <- mean(muestra_h10b)
# Calculo de la media de h10d.
media_h10d <- mean(muestra_h10d)
# Calculo del valor observado.
valor_observado <- media_h10b - media_h10d
# Crear distribución de bootstrap.
B <- 2999
valor_nulo = 0
distribucion_bootstrap <- two.boot(muestra_h10b, muestra_h10d, FUN = mean, R = B)
desplazamiento <- mean(distribucion_bootstrap[["t"]]) - valor_nulo
distribucion_nula <- distribucion_bootstrap[["t"]] - desplazamiento
# Determinar el valor p.
p <- (sum(abs(distribucion_nula) > abs(valor_observado)) + 1) / (B + 1)
cat("Valor p:", p)
# Función mejorada para simular diferencias de horas bajo la hipótesis nula
simular_diferencia_horas_mejorada <- function(muestra_hombres, muestra_mujeres) {
# Calcular la diferencia de horas observada en las muestras
diferencia_observada <- mean(muestra_hombres$o10) - mean(muestra_mujeres$o10)
# Realizar simulaciones de Monte Carlo más robustas
num_simulaciones <- 10000
diferencias_simuladas <- numeric(num_simulaciones)
for (i in 1:num_simulaciones) {
# Mezclar aleatoriamente las horas de hombres y mujeres
horas_mezcladas <- c(muestra_hombres$o10, muestra_mujeres$o10)
horas_mezcladas <- sample(horas_mezcladas)
# Calcular la diferencia de horas simulada
diferencia_simulada <- mean(horas_mezcladas[1:125]) - mean(horas_mezcladas[126:250])
diferencias_simuladas[i] <- diferencia_simulada
}
# Calcular el p-valor
p_valor <- mean(abs(diferencias_simuladas) >= abs(diferencia_observada), na.rm = TRUE)
return(p_valor)
}
# Aplicar la función mejorada para simular las diferencias de horas
p_valor_mejorado <- simular_diferencia_horas_mejorada(muestra_hombres, muestra_mujeres)
# Mostrar el p-valor mejorado
print(p_valor_mejorado)
